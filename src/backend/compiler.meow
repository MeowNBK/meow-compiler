import * as CodeGenerator from "./codeGenerator.meow";
import * as Io from "io";
import * as Json from "json";
import * as System from "system";
// import * as Meta from "meta";
import { makeCacheFile } from "./utils/makeCacheFile.meow";
import { BytecodeStringifier } from "./bytecodeStringifier.meow";
import { Lexer } from "../frontend/lexer.meow";
import { Parser } from "../frontend/parser.meow";
import { Preprocessor } from "../frontend/preprocessor.meow";

fn _getDirectoryPath(fullPath) {
    let filename = Io.getFileName(fullPath);
    if (filename.length >= fullPath.length) return "";
    return fullPath.slice(0, fullPath.length - filename.length);
}

fn _isAbsolutePath(path) {
    if (path.length == 0) return false;

    if (path[0] == "/" || path[0] == "\\") return true;

    if (path.length >= 3 && path[1] == ":") {
        let driveLetter = path[0];
        if ((driveLetter >= "a" && driveLetter <= "z") || (driveLetter >= "A" && driveLetter <= "Z")) {
            if (path[2] == "/" || path[2] == "\\") return true;
        }
    }
    return false;
}

fn _findExportedNames(ast) {
    let names = [];
    if (!ast || !ast.body) return names;
    for (stmt in ast.body) {
        if (stmt.type == "ExportStatement" && stmt.declaration) {
            if (stmt.declaration.name && stmt.declaration.name.name) {
                // Lấy tên từ `export class Name`, `export function Name`, `export let Name`
                names.push(stmt.declaration.name.name);
            }
        }
    }
    return names;
}


export class Compiler {
    fn init(isNoCache, options) {
        this.compiledModules = {};
        this.isNoCache = isNoCache;
        this.dependencyGraph = {};
        this.reverseGraph = {};
        this.options = options || {};
    }

    fn compileProject(entryPath) {
        let initialDir = ".";
        let entryCache = this._compileFile(entryPath, initialDir);
        if (this.options.bundle) {
            return this._createBundle(entryPath);
        }
        if (this.options.out) {
            Io.copyFile(entryCache, this.options.out);
            // print("✅ Viết output vào: " + this.options.out);
            return Io.getAbsolutePath(this.options.out);
        }
        return entryCache;
    }

    fn _compileFile(sourcePath, importerDir) {
        let absolutePath = this._resolvePath(sourcePath, importerDir);

        if (this.compiledModules[absolutePath]) return this.compiledModules[absolutePath];

        let cachePath = makeCacheFile(absolutePath, this.options.buildDir || "build");
        let metaPath = cachePath + ".meta";

        if (this._isCacheValid(absolutePath, cachePath)) {
            let metaText = Io.read(metaPath);
            if (!metaText) {
                print("[ERROR] Không thể đọc meta file: " + metaPath);
                System.exit(1);
            }
            let meta = Json.parse(metaText);
            this.dependencyGraph[absolutePath] = meta.imports || [];

            for (imp in this.dependencyGraph[absolutePath]) {
                if (!this.reverseGraph[imp]) this.reverseGraph[imp] = {};
                this.reverseGraph[imp][absolutePath] = true;
            }

            this.compiledModules[absolutePath] = Io.getAbsolutePath(cachePath);
            // print("♻️ Đã dùng lại cache cho: " + absolutePath);
            return Io.getAbsolutePath(cachePath);
        }

        if (!Io.fileExists(absolutePath)) {
            print("[ERROR] File nguồn không tồn tại: " + absolutePath);
            System.exit(1);
        }

        let source = Io.read(absolutePath);
        if (source == null) {
            print("[ERROR] Không thể đọc file nguồn: " + absolutePath);
            System.exit(1);
        }

        // let filename = Io.getFileName(absolutePath);
        let preprocessor = new Preprocessor();
        let processedSource = preprocessor.process(source, absolutePath);

        let lexer = new Lexer(processedSource, absolutePath);
        let tokens = lexer.tokenize();
        let parser = new Parser(tokens);
        let ast = parser.parseProgram();
        if (!ast) {
            print("[ERROR] Meta.compile trả về null/undefined cho: " + absolutePath);
            System.exit(1);
        }

        let sourceDir = _getDirectoryPath(absolutePath);
        let imports = this._extractImportsFromAST(ast, sourceDir);

        for (imp in imports) {
            this._compileFile(imp, sourceDir);
            if (!this.reverseGraph[imp]) this.reverseGraph[imp] = {};
            this.reverseGraph[imp][absolutePath] = true;
        }

        let generator = CodeGenerator.CodeGenerator(ast, this, absolutePath);
        let protos = generator.compile();

        if (!Io.fileExists("tokens")) {
            Io.createDir("tokens");
        }

        if (!Io.fileExists("asts")) {
            Io.createDir("asts");
        }
        if (!Io.fileExists("protos")) {
            Io.createDir("protos");
        }

        Io.write("tokens/" + Io.getFileStem(absolutePath) + ".json", str(Json.stringify(tokens)));
        Io.write("asts/" + Io.getFileStem(absolutePath) + ".json", str(Json.stringify(ast)));
        Io.write("protos/" + Io.getFileStem(absolutePath) + ".json", str(Json.stringify(protos)));

        let stringifier = BytecodeStringifier();
        let bytecodeText = stringifier.stringify(protos);

        Io.write(cachePath, bytecodeText);

        let metaOut = { imports: imports, srcTime: Io.getFileTimestamp(absolutePath), srcSize: Io.getFileSize(absolutePath) };
        metaOut.importTimes = {};
        metaOut.importSizes = {};
        for (imp in imports) {
            metaOut.importTimes[imp] = Io.getFileTimestamp(imp);
            metaOut.importSizes[imp] = Io.getFileSize(imp);
        }
        Io.write(metaPath, Json.stringify(metaOut));

        this.dependencyGraph[absolutePath] = imports;
        this.compiledModules[absolutePath] = Io.getAbsolutePath(cachePath);

        // print("✅ Biên dịch xong, tạo file cache mới: " + cachePath);

        let dependents = this._gatherDependents(absolutePath, null);
        for (d in dependents) {
            if (!this.compiledModules[d]) {
                let dd = _getDirectoryPath(d);
                this._compileFile(d, dd);
            }
        }

        return Io.getAbsolutePath(cachePath);
    }

    fn _resolvePath(p, importerDir) {
        // 0) absolute -> trả luôn
        if (_isAbsolutePath(p)) return Io.getAbsolutePath(p);

        // Chuẩn hoá importerDir thành absolute (nếu có)
        let absImporter = null;
        if (importerDir && importerDir.length > 0) {
            absImporter = Io.getAbsolutePath(importerDir);
        }

        // Xác định xem import có phải là explicit-relative (./ or ../)
        let isExplicitRelative = false;
        if (p.startsWith("./") || p.startsWith("../")) isExplicitRelative = true;

        // Build candidate list:
        let candidates = [];

        // 1) nếu import dạng ./... hoặc ../... thì ưu tiên importerDir
        if (isExplicitRelative && absImporter) {
            candidates.push(absImporter + "/" + p);
        }

        // 2) includePaths từ options (nếu có)
        if (this && this.options && this.options.includePaths) {
            for (ip in this.options.includePaths) {
                candidates.push(Io.getAbsolutePath(ip) + "/" + p);
            }
        }

        // 3) cwd
        candidates.push(Io.getAbsolutePath(".") + "/" + p);

        // 4) fallback: original p (module name / maybe absolute after Io.getAbsolutePath)
        candidates.push(p);

        // Thử each candidate; nếu không tìm, thử thêm .meow
        let tryWithExt = !p.endsWith(".meow");
        for (cand in candidates) {
            let absCand = Io.getAbsolutePath(cand);
            if (Io.fileExists(absCand)) return absCand;
            if (tryWithExt) {
                let absExt = Io.getAbsolutePath(cand + ".meow");
                if (Io.fileExists(absExt)) return absExt;
            }
        }

        // cuối cùng: nếu import là explicit-relative thì trả path relativized importerDir/p
        if (isExplicitRelative && absImporter) return Io.getAbsolutePath(absImporter + "/" + p);

        // fallback cuối cùng
        if (absImporter && !isExplicitRelative) return Io.getAbsolutePath(absImporter + "/" + p);
        return Io.getAbsolutePath(p);
    }


    fn _extractImportsFromAST(ast, sourceDir) {
        let imports = [];
        if (!ast || !ast.body) return imports;
        for (stmt in ast.body) {
            if (stmt.type == "ImportStatement") {
                let dependencyPath = stmt.path.value;
                if (dependencyPath.endsWith(".meow")) {
                    imports.push(this._resolvePath(dependencyPath, sourceDir));
                }
            }
        }
        return imports;
    }

    fn _gatherDependents(absSource, accum) {
        if (!accum) accum = {};
        let direct = this.reverseGraph[absSource];
        if (!direct) return accum;
        for (d in direct) {
            if (!accum[d]) {
                accum[d] = true;
                this._gatherDependents(d, accum);
            }
        }
        return accum;
    }

    fn _isCacheValid(absSourcePath, cachePath) {
        // 1. Giữ lại tất cả các bước kiểm tra ban đầu (file có tồn tại không, v.v...)
        if (this.isNoCache || this.options.force) return false;
        if (!Io.fileExists(cachePath)) return false;

        let metaPath = cachePath + ".meta";
        if (!Io.fileExists(metaPath)) return false;

        let metaText = Io.read(metaPath);
        if (!metaText) return false;

        let meta = Json.parse(metaText);
        if (!meta) return false;

        if (!Io.fileExists(absSourcePath)) return false;
        let srcTime = Io.getFileTimestamp(absSourcePath);
        let srcSize = Io.getFileSize(absSourcePath);
        
        // 2. Vẫn kiểm tra chính file nguồn, nếu nó thay đổi thì chắc chắn không hợp lệ
        if (meta.srcTime != srcTime || meta.srcSize != srcSize) return false;

        // 3. --- NÂNG CẤP LOGIC KIỂM TRA ĐỆ QUY ---
        // Thay vì chỉ check timestamp, ta check xem cache của file con có hợp lệ không
        for (imp in meta.imports) {
            // Tự tính ra đường dẫn cache của file dependency
            let impCachePath = makeCacheFile(imp, this.options.buildDir || "build");
            
            // ĐỆ QUY THẦN SẦU ĐÂY RỒI!
            // Nếu cache của thằng con không hợp lệ thì cache của mình cũng vứt đi!
            if (!this._isCacheValid(imp, impCachePath)) {
                return false;
            }
        }

        // 4. Nếu tất cả các file con cháu đều hợp lệ, thì cache này mới thực sự hợp lệ
        return true;
    }

    fn _createBundle(entryPath) {
        print("📦 Bắt đầu quá trình bundle từ entrypoint: " + entryPath);
        let visited = {};
        // Hàm _bundleAst giờ sẽ trả về một object, ta chỉ cần phần body cuối cùng.
        let bundledResult = this._bundleAst(entryPath, ".", visited);
        let bundledAst = { type: "Program", body: bundledResult.body };

        let outPath = this.options.out || "bundle.meowb";
        let generator = CodeGenerator.CodeGenerator(bundledAst, this, outPath);
        let protos = generator.compile();

        let stringifier = BytecodeStringifier();
        let bytecodeText = stringifier.stringify(protos);

        Io.write(outPath, bytecodeText);
        print("📦 Tạo bundle thành công: " + outPath);
        return Io.getAbsolutePath(outPath);
    }

    // SỬA ĐỔI HÀM NÀY
    fn _bundleAst(sourcePath, importerDir, visited) {
        let absolutePath = this._resolvePath(sourcePath, importerDir);

        if (visited[absolutePath]) {
            // Trả về một cấu trúc rỗng để tránh lỗi và import lặp.
            return { type: "Program", body: [], exports: [] };
        }
        visited[absolutePath] = true;

        let source = Io.read(absolutePath);
        if (source == null) {
            print("[ERROR] Bundle: Không thể đọc file nguồn: " + absolutePath);
            System.exit(1);
        }

        let lexer = new Lexer(source, absolutePath);
        let tokens = lexer.tokenize();
        let parser = new Parser(tokens);
        let ast = parser.parseProgram();

        let exportedNames = _findExportedNames(ast); // Tìm các tên export của file này.
        let newBody = [];
        let sourceDir = _getDirectoryPath(absolutePath);

        for (stmt in ast.body) {
            if (stmt.type == "ImportStatement") {
                let dependencyPath = stmt.path.value;
                if (dependencyPath.endsWith(".meow")) {
                    // Đệ quy để lấy AST và danh sách export của module con.
                    let importedResult = this._bundleAst(dependencyPath, sourceDir, visited);
                    
                    // Dán phần thân của module con vào trước.
                    for (childStmt in importedResult.body) {
                        newBody.push(childStmt);
                    }

                    // Xử lý logic tạo namespace nếu cần.
                    if (stmt.namespaceImport != null) {
                        // Đây là `import * as Name from ...`
                        let namespaceName = stmt.namespaceImport.name;
                        let properties = [];
                        for (exportedName in importedResult.exports) {
                            properties.push({
                                key: { type: "StringLiteral", value: exportedName },
                                value: { type: "Identifier", name: exportedName }
                            });
                        }
                        let objectLiteral = { type: "ObjectLiteral", properties: properties };
                        // Tạo câu lệnh `let Name = { ... };` bằng AST
                        let letStmt = {
                            type: "LetStatement",
                            name: { type: "Identifier", name: namespaceName },
                            value: objectLiteral,
                            isConstant: true
                        };
                        newBody.push(letStmt);
                    }
                    // Với `import {..}` hoặc `import '...'`, ta chỉ cần dán code, không cần làm gì thêm.

                } else {
                    newBody.push(stmt); // Giữ lại import stdlib
                }
            } else if (stmt.type == "ExportStatement") {
                // "Mở gói" export để nó trở thành khai báo bình thường.
                if (stmt.declaration) {
                    newBody.push(stmt.declaration);
                }
            } else {
                newBody.push(stmt);
            }
        }

        ast.body = newBody;
        // Trả về cả thân AST đã xử lý và danh sách tên đã export.
        return { type: "Program", body: ast.body, exports: exportedNames };
    }



}