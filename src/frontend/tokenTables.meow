import { TokenType } from "./token.meow";

export let keywords = {
    "let": TokenType.KEYWORD_LET,
    "const": TokenType.KEYWORD_CONST,
    "while": TokenType.KEYWORD_WHILE,
    "for": TokenType.KEYWORD_FOR,
    "if": TokenType.KEYWORD_IF,
    "else": TokenType.KEYWORD_ELSE,
    "return": TokenType.KEYWORD_RETURN,
    "break": TokenType.KEYWORD_BREAK,
    "continue": TokenType.KEYWORD_CONTINUE,
    "function": TokenType.KEYWORD_FUNCTION,
    "fn": TokenType.KEYWORD_FUNCTION,
    "null": TokenType.KEYWORD_NULL,

    "class": TokenType.KEYWORD_CLASS,
    "this": TokenType.KEYWORD_THIS,
    "super": TokenType.KEYWORD_SUPER,
    "new": TokenType.KEYWORD_NEW,
    "static": TokenType.KEYWORD_STATIC,
    "throw": TokenType.KEYWORD_THROW,
    "import": TokenType.KEYWORD_IMPORT,
    "export": TokenType.KEYWORD_EXPORT,
    "as": TokenType.KEYWORD_AS,
    "from": TokenType.KEYWORD_FROM,
    "try": TokenType.KEYWORD_TRY,
    "catch": TokenType.KEYWORD_CATCH,

    "switch": TokenType.KEYWORD_SWITCH,
    "case": TokenType.KEYWORD_CASE,
    "default": TokenType.KEYWORD_DEFAULT,
    
    "do": TokenType.KEYWORD_DO,
    "in": TokenType.KEYWORD_IN,

    "log": TokenType.KEYWORD_LOG,

    "true": TokenType.BOOLEAN,
    "false": TokenType.BOOLEAN
};

export let symbols = {
    "+": TokenType.OP_PLUS,
    "-": TokenType.OP_MINUS,
    "*": TokenType.OP_MULTIPLY,
    "/": TokenType.OP_DIVIDE,
    "%": TokenType.OP_MODULO,

    "&": TokenType.OP_BIT_AND,
    "|": TokenType.OP_BIT_OR,
    "^": TokenType.OP_BIT_XOR,
    "~": TokenType.OP_BIT_NOT,
    "<<": TokenType.OP_LSHIFT,
    ">>": TokenType.OP_RSHIFT,

    "==": TokenType.OP_EQ,
    "!=": TokenType.OP_NEQ,
    "<": TokenType.OP_LT,
    ">": TokenType.OP_GT,
    "<=": TokenType.OP_LE,
    ">=": TokenType.OP_GE,

    "&&": TokenType.OP_LOGICAL_AND,
    "||": TokenType.OP_LOGICAL_OR,
    "!": TokenType.OP_LOGICAL_NOT,

    "=": TokenType.OP_ASSIGN,

    "+=": TokenType.OP_PLUS_ASSIGN,
    "-=": TokenType.OP_MINUS_ASSIGN,
    "*=": TokenType.OP_MULTIPLY_ASSIGN,
    "/=": TokenType.OP_DIVIDE_ASSIGN,
    "%=": TokenType.OP_MODULO_ASSIGN,
    "**=": TokenType.OP_EXPONENT_ASSIGN,

    "&=": TokenType.OP_AND_ASSIGN,
    "|=": TokenType.OP_OR_ASSIGN,
    "^=": TokenType.OP_XOR_ASSIGN,
    "~=": TokenType.OP_NOT_ASSIGN,
    "<<=": TokenType.OP_LSHIFT_ASSIGN,
    ">>=": TokenType.OP_RSHIFT_ASSIGN,

    "++": TokenType.OP_INCREMENT,
    "--": TokenType.OP_DECREMENT,

    "...": TokenType.OP_ELLIPSIS,
    "??": TokenType.OP_NULLISH,
    "**": TokenType.OP_EXPONENT,

    ";": TokenType.PUNCT_SEMICOLON,
    ":": TokenType.PUNCT_COLON,
    ",": TokenType.PUNCT_COMMA,
    "(": TokenType.PUNCT_LPAREN,
    ")": TokenType.PUNCT_RPAREN,
    "{": TokenType.PUNCT_LBRACE,
    "}": TokenType.PUNCT_RBRACE,
    "[": TokenType.PUNCT_LBRACKET,
    "]": TokenType.PUNCT_RBRACKET,
    ".": TokenType.PUNCT_DOT,
    "?": TokenType.PUNCT_QUESTION,

    "`": TokenType.PUNCT_BACKTICK,
    "%{": TokenType.PUNCT_PERCENT_LBRACE
};